/*
 * Pecunia
 *
 * a sample API to return users and accounts information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PecuniaClient.Client.OpenAPIDateConverter;

namespace PecuniaClient.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract(Name = "Account")]
    public partial class Account : IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="uuid">UUID of the account.</param>
        /// <param name="ownerUuid">UUID of account owner.</param>
        /// <param name="value">balance of the account.</param>
        /// <param name="isFrozen">flag to indicate if the account is frozen.</param>
        public Account(Guid uuid = default(Guid), Guid ownerUuid = default(Guid), decimal value = default(decimal), bool isFrozen = default(bool))
        {
            this.Uuid = uuid;
            this.OwnerUuid = ownerUuid;
            this.Value = value;
            this.IsFrozen = isFrozen;
        }

        /// <summary>
        /// UUID of the account
        /// </summary>
        /// <value>UUID of the account</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public Guid Uuid { get; set; }

        /// <summary>
        /// UUID of account owner
        /// </summary>
        /// <value>UUID of account owner</value>
        [DataMember(Name = "owner_uuid", EmitDefaultValue = false)]
        public Guid OwnerUuid { get; set; }

        /// <summary>
        /// balance of the account
        /// </summary>
        /// <value>balance of the account</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// flag to indicate if the account is frozen
        /// </summary>
        /// <value>flag to indicate if the account is frozen</value>
        [DataMember(Name = "is_frozen", EmitDefaultValue = true)]
        public bool IsFrozen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  OwnerUuid: ").Append(OwnerUuid).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsFrozen: ").Append(IsFrozen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.OwnerUuid == input.OwnerUuid ||
                    (this.OwnerUuid != null &&
                    this.OwnerUuid.Equals(input.OwnerUuid))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.IsFrozen == input.IsFrozen ||
                    this.IsFrozen.Equals(input.IsFrozen)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.OwnerUuid != null)
                    hashCode = hashCode * 59 + this.OwnerUuid.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.IsFrozen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
