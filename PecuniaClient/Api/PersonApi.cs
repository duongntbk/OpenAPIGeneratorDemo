/*
 * Pecunia
 *
 * a sample API to return users and accounts information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PecuniaClient.Client;
using PecuniaClient.Model;

namespace PecuniaClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all people in DB
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Person&gt;</returns>
        List<Person> PeopleIndex();

        /// <summary>
        /// Get all people in DB
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        ApiResponse<List<Person>> PeopleIndexWithHttpInfo();
        /// <summary>
        /// Get a person using their UUID
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID to search for one person (optional)</param>
        /// <returns>Person</returns>
        Person PeopleShow(Guid? uuid = default(Guid?));

        /// <summary>
        /// Get a person using their UUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID to search for one person (optional)</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> PeopleShowWithHttpInfo(Guid? uuid = default(Guid?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all people in DB
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        System.Threading.Tasks.Task<List<Person>> PeopleIndexAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all people in DB
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Person>>> PeopleIndexWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a person using their UUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID to search for one person (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> PeopleShowAsync(Guid? uuid = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a person using their UUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID to search for one person (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> PeopleShowWithHttpInfoAsync(Guid? uuid = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApi : IPersonApiSync, IPersonApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonApi : IPersonApi
    {
        private PecuniaClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonApi(string basePath)
        {
            this.Configuration = PecuniaClient.Client.Configuration.MergeConfigurations(
                PecuniaClient.Client.GlobalConfiguration.Instance,
                new PecuniaClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PecuniaClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PecuniaClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PecuniaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonApi(PecuniaClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PecuniaClient.Client.Configuration.MergeConfigurations(
                PecuniaClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PecuniaClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PecuniaClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PecuniaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PersonApi(PecuniaClient.Client.ISynchronousClient client, PecuniaClient.Client.IAsynchronousClient asyncClient, PecuniaClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PecuniaClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PecuniaClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PecuniaClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PecuniaClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PecuniaClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all people in DB 
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Person&gt;</returns>
        public List<Person> PeopleIndex()
        {
            PecuniaClient.Client.ApiResponse<List<Person>> localVarResponse = PeopleIndexWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all people in DB 
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        public PecuniaClient.Client.ApiResponse<List<Person>> PeopleIndexWithHttpInfo()
        {
            PecuniaClient.Client.RequestOptions localVarRequestOptions = new PecuniaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PecuniaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PecuniaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Person>>("/person/index", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PeopleIndex", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all people in DB 
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        public async System.Threading.Tasks.Task<List<Person>> PeopleIndexAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PecuniaClient.Client.ApiResponse<List<Person>> localVarResponse = await PeopleIndexWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all people in DB 
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        public async System.Threading.Tasks.Task<PecuniaClient.Client.ApiResponse<List<Person>>> PeopleIndexWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PecuniaClient.Client.RequestOptions localVarRequestOptions = new PecuniaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PecuniaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PecuniaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Person>>("/person/index", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PeopleIndex", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a person using their UUID 
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID to search for one person (optional)</param>
        /// <returns>Person</returns>
        public Person PeopleShow(Guid? uuid = default(Guid?))
        {
            PecuniaClient.Client.ApiResponse<Person> localVarResponse = PeopleShowWithHttpInfo(uuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a person using their UUID 
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID to search for one person (optional)</param>
        /// <returns>ApiResponse of Person</returns>
        public PecuniaClient.Client.ApiResponse<Person> PeopleShowWithHttpInfo(Guid? uuid = default(Guid?))
        {
            PecuniaClient.Client.RequestOptions localVarRequestOptions = new PecuniaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PecuniaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PecuniaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(PecuniaClient.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Person>("/person/show", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PeopleShow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a person using their UUID 
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID to search for one person (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> PeopleShowAsync(Guid? uuid = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PecuniaClient.Client.ApiResponse<Person> localVarResponse = await PeopleShowWithHttpInfoAsync(uuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a person using their UUID 
        /// </summary>
        /// <exception cref="PecuniaClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID to search for one person (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<PecuniaClient.Client.ApiResponse<Person>> PeopleShowWithHttpInfoAsync(Guid? uuid = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PecuniaClient.Client.RequestOptions localVarRequestOptions = new PecuniaClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PecuniaClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PecuniaClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(PecuniaClient.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Person>("/person/show", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PeopleShow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
