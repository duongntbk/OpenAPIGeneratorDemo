/*
 * Maritimum
 *
 * a sample API to return ships and ports information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MaritimumClient.Client;
using MaritimumClient.Model;

namespace MaritimumClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all ships in DB
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ship&gt;</returns>
        List<Ship> ShipsIndex();

        /// <summary>
        /// Get all ships in DB
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ship&gt;</returns>
        ApiResponse<List<Ship>> ShipsIndexWithHttpInfo();
        /// <summary>
        /// Get a list of ships using their port UUID and tonnage range
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipReportRequest">Used to filter the reported existing ships.</param>
        /// <returns>List&lt;Ship&gt;</returns>
        List<Ship> ShipsReport(ShipReportRequest shipReportRequest);

        /// <summary>
        /// Get a list of ships using their port UUID and tonnage range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipReportRequest">Used to filter the reported existing ships.</param>
        /// <returns>ApiResponse of List&lt;Ship&gt;</returns>
        ApiResponse<List<Ship>> ShipsReportWithHttpInfo(ShipReportRequest shipReportRequest);
        /// <summary>
        /// Get a ship by its UUID
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UUID of the ship.</param>
        /// <returns>Ship</returns>
        Ship ShipsShow(Guid body);

        /// <summary>
        /// Get a ship by its UUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UUID of the ship.</param>
        /// <returns>ApiResponse of Ship</returns>
        ApiResponse<Ship> ShipsShowWithHttpInfo(Guid body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all ships in DB
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Ship&gt;</returns>
        System.Threading.Tasks.Task<List<Ship>> ShipsIndexAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all ships in DB
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Ship&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ship>>> ShipsIndexWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of ships using their port UUID and tonnage range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipReportRequest">Used to filter the reported existing ships.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Ship&gt;</returns>
        System.Threading.Tasks.Task<List<Ship>> ShipsReportAsync(ShipReportRequest shipReportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of ships using their port UUID and tonnage range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipReportRequest">Used to filter the reported existing ships.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Ship&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ship>>> ShipsReportWithHttpInfoAsync(ShipReportRequest shipReportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a ship by its UUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UUID of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ship</returns>
        System.Threading.Tasks.Task<Ship> ShipsShowAsync(Guid body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a ship by its UUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UUID of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ship)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ship>> ShipsShowWithHttpInfoAsync(Guid body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipApi : IShipApiSync, IShipApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipApi : IShipApi
    {
        private MaritimumClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipApi(string basePath)
        {
            this.Configuration = MaritimumClient.Client.Configuration.MergeConfigurations(
                MaritimumClient.Client.GlobalConfiguration.Instance,
                new MaritimumClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MaritimumClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MaritimumClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MaritimumClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipApi(MaritimumClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MaritimumClient.Client.Configuration.MergeConfigurations(
                MaritimumClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MaritimumClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MaritimumClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MaritimumClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShipApi(MaritimumClient.Client.ISynchronousClient client, MaritimumClient.Client.IAsynchronousClient asyncClient, MaritimumClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MaritimumClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MaritimumClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MaritimumClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MaritimumClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MaritimumClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all ships in DB 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ship&gt;</returns>
        public List<Ship> ShipsIndex()
        {
            MaritimumClient.Client.ApiResponse<List<Ship>> localVarResponse = ShipsIndexWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all ships in DB 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ship&gt;</returns>
        public MaritimumClient.Client.ApiResponse<List<Ship>> ShipsIndexWithHttpInfo()
        {
            MaritimumClient.Client.RequestOptions localVarRequestOptions = new MaritimumClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MaritimumClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MaritimumClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Ship>>("/ship/index", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipsIndex", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all ships in DB 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Ship&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ship>> ShipsIndexAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MaritimumClient.Client.ApiResponse<List<Ship>> localVarResponse = await ShipsIndexWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all ships in DB 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Ship&gt;)</returns>
        public async System.Threading.Tasks.Task<MaritimumClient.Client.ApiResponse<List<Ship>>> ShipsIndexWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MaritimumClient.Client.RequestOptions localVarRequestOptions = new MaritimumClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = MaritimumClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MaritimumClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Ship>>("/ship/index", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipsIndex", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of ships using their port UUID and tonnage range 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipReportRequest">Used to filter the reported existing ships.</param>
        /// <returns>List&lt;Ship&gt;</returns>
        public List<Ship> ShipsReport(ShipReportRequest shipReportRequest)
        {
            MaritimumClient.Client.ApiResponse<List<Ship>> localVarResponse = ShipsReportWithHttpInfo(shipReportRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of ships using their port UUID and tonnage range 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipReportRequest">Used to filter the reported existing ships.</param>
        /// <returns>ApiResponse of List&lt;Ship&gt;</returns>
        public MaritimumClient.Client.ApiResponse<List<Ship>> ShipsReportWithHttpInfo(ShipReportRequest shipReportRequest)
        {
            // verify the required parameter 'shipReportRequest' is set
            if (shipReportRequest == null)
                throw new MaritimumClient.Client.ApiException(400, "Missing required parameter 'shipReportRequest' when calling ShipApi->ShipsReport");

            MaritimumClient.Client.RequestOptions localVarRequestOptions = new MaritimumClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MaritimumClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MaritimumClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = shipReportRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Ship>>("/ship/report", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipsReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of ships using their port UUID and tonnage range 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipReportRequest">Used to filter the reported existing ships.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Ship&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ship>> ShipsReportAsync(ShipReportRequest shipReportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MaritimumClient.Client.ApiResponse<List<Ship>> localVarResponse = await ShipsReportWithHttpInfoAsync(shipReportRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of ships using their port UUID and tonnage range 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipReportRequest">Used to filter the reported existing ships.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Ship&gt;)</returns>
        public async System.Threading.Tasks.Task<MaritimumClient.Client.ApiResponse<List<Ship>>> ShipsReportWithHttpInfoAsync(ShipReportRequest shipReportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipReportRequest' is set
            if (shipReportRequest == null)
                throw new MaritimumClient.Client.ApiException(400, "Missing required parameter 'shipReportRequest' when calling ShipApi->ShipsReport");


            MaritimumClient.Client.RequestOptions localVarRequestOptions = new MaritimumClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = MaritimumClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MaritimumClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = shipReportRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Ship>>("/ship/report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipsReport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a ship by its UUID 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UUID of the ship.</param>
        /// <returns>Ship</returns>
        public Ship ShipsShow(Guid body)
        {
            MaritimumClient.Client.ApiResponse<Ship> localVarResponse = ShipsShowWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a ship by its UUID 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UUID of the ship.</param>
        /// <returns>ApiResponse of Ship</returns>
        public MaritimumClient.Client.ApiResponse<Ship> ShipsShowWithHttpInfo(Guid body)
        {
            MaritimumClient.Client.RequestOptions localVarRequestOptions = new MaritimumClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MaritimumClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MaritimumClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Ship>("/ship/show", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipsShow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a ship by its UUID 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UUID of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ship</returns>
        public async System.Threading.Tasks.Task<Ship> ShipsShowAsync(Guid body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MaritimumClient.Client.ApiResponse<Ship> localVarResponse = await ShipsShowWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a ship by its UUID 
        /// </summary>
        /// <exception cref="MaritimumClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UUID of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ship)</returns>
        public async System.Threading.Tasks.Task<MaritimumClient.Client.ApiResponse<Ship>> ShipsShowWithHttpInfoAsync(Guid body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MaritimumClient.Client.RequestOptions localVarRequestOptions = new MaritimumClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = MaritimumClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MaritimumClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Ship>("/ship/show", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipsShow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
